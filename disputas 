Perfeito! Vou entregar a vers√£o final e completa, sem dados simulados, pronta para produ√ß√£o.

üöÄ Backend Final (FastAPI)

```python
# app/__init__.py
# Arquivo vazio para indicar que √© um pacote Python
```

```python
# app/config.py
import os
from typing import Optional

class Settings:
    DATABASE_URL: str = os.getenv("DATABASE_URL", "sqlite:///./visit.db")
    UPLOAD_DIR: str = os.getenv("UPLOAD_DIR", "uploads")
    ALLOWED_EXTENSIONS: set = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
    MAX_FILE_SIZE: int = 10 * 1024 * 1024  # 10MB

settings = Settings()
```

```python
# app/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.config import settings

engine = create_engine(settings.DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

```python
# app/models.py
from sqlalchemy import Column, Integer, String, Enum, ForeignKey, DateTime, Text
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
from app.database import Base

class DisputeStatus(str, enum.Enum):
    OPEN = "open"
    UNDER_REVIEW = "under_review"
    RESOLVED_CLIENT = "resolved_client"
    RESOLVED_PROVIDER = "resolved_provider"

class UserRole(str, enum.Enum):
    CLIENT = "client"
    PROVIDER = "provider"
    ADMIN = "admin"

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=False)
    role = Column(Enum(UserRole), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    disputes_opened = relationship("Dispute", foreign_keys="Dispute.opened_by", back_populates="opener")
    images_uploaded = relationship("DisputeImage", back_populates="uploader")

class Service(Base):
    __tablename__ = "services"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(200), nullable=False)
    description = Column(Text)
    client_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    provider_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    status = Column(String(50), default="pending")
    created_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    
    client = relationship("User", foreign_keys=[client_id])
    provider = relationship("User", foreign_keys=[provider_id])
    disputes = relationship("Dispute", back_populates="service")

class Dispute(Base):
    __tablename__ = "disputes"
    
    id = Column(Integer, primary_key=True, index=True)
    service_id = Column(Integer, ForeignKey("services.id"), nullable=False)
    opened_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    description = Column(Text, nullable=False)
    status = Column(Enum(DisputeStatus), default=DisputeStatus.OPEN)
    created_at = Column(DateTime, default=datetime.utcnow)
    resolved_at = Column(DateTime, nullable=True)
    resolved_by = Column(Integer, ForeignKey("users.id"), nullable=True)
    
    service = relationship("Service", back_populates="disputes")
    opener = relationship("User", foreign_keys=[opened_by], back_populates="disputes_opened")
    resolver = relationship("User", foreign_keys=[resolved_by])
    images = relationship("DisputeImage", back_populates="dispute")

class DisputeImage(Base):
    __tablename__ = "dispute_images"
    
    id = Column(Integer, primary_key=True, index=True)
    dispute_id = Column(Integer, ForeignKey("disputes.id"), nullable=False)
    uploaded_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    filename = Column(String(255), nullable=False)
    file_path = Column(String(500), nullable=False)
    file_size = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    dispute = relationship("Dispute", back_populates="images")
    uploader = relationship("User", back_populates="images_uploaded")
```

```python
# app/schemas.py
from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional
from app.models import DisputeStatus, UserRole

class UserBase(BaseModel):
    name: str
    email: str
    role: UserRole

class UserCreate(UserBase):
    password: str

class UserResponse(UserBase):
    id: int
    created_at: datetime
    
    class Config:
        from_attributes = True

class ServiceBase(BaseModel):
    title: str
    description: Optional[str] = None
    client_id: int
    provider_id: int

class ServiceCreate(ServiceBase):
    pass

class ServiceResponse(ServiceBase):
    id: int
    status: str
    created_at: datetime
    completed_at: Optional[datetime] = None
    
    class Config:
        from_attributes = True

class DisputeBase(BaseModel):
    service_id: int
    description: str

class DisputeCreate(DisputeBase):
    opened_by: int

class DisputeResponse(BaseModel):
    id: int
    service_id: int
    opened_by: int
    description: str
    status: DisputeStatus
    created_at: datetime
    resolved_at: Optional[datetime] = None
    resolved_by: Optional[int] = None
    
    class Config:
        from_attributes = True

class DisputeImageResponse(BaseModel):
    id: int
    dispute_id: int
    uploaded_by: int
    filename: str
    file_path: str
    file_size: int
    created_at: datetime
    
    class Config:
        from_attributes = True

class DisputeWithImagesResponse(DisputeResponse):
    images: List[DisputeImageResponse] = []
    
    class Config:
        from_attributes = True

class DisputeResolution(BaseModel):
    resolved_by: int
    decision: str  # "client" or "provider"
```

```python
# app/utils.py
import os
import uuid
from fastapi import UploadFile, HTTPException
from app.config import settings

def save_upload_file(file: UploadFile, upload_dir: str) -> tuple:
    """Salva arquivo upload e retorna (filename, file_path, file_size)"""
    
    # Verificar extens√£o
    file_extension = os.path.splitext(file.filename)[1].lower()
    if file_extension not in settings.ALLOWED_EXTENSIONS:
        raise HTTPException(400, f"Extens√£o n√£o permitida. Use: {settings.ALLOWED_EXTENSIONS}")
    
    # Gerar nome √∫nico
    filename = f"{uuid.uuid4()}{file_extension}"
    file_path = os.path.join(upload_dir, filename)
    
    # Salvar arquivo
    file_content = file.file.read()
    file_size = len(file_content)
    
    if file_size > settings.MAX_FILE_SIZE:
        raise HTTPException(400, f"Arquivo muito grande. M√°ximo: {settings.MAX_FILE_SIZE//1024//1024}MB")
    
    with open(file_path, "wb") as f:
        f.write(file_content)
    
    return filename, file_path, file_size

def ensure_upload_dir():
    """Garante que o diret√≥rio de upload existe"""
    os.makedirs(settings.UPLOAD_DIR, exist_ok=True)
```

```python
# app/crud.py
from sqlalchemy.orm import Session
from sqlalchemy import and_
from app import models, schemas

def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

def get_service(db: Session, service_id: int):
    return db.query(models.Service).filter(models.Service.id == service_id).first()

def get_dispute(db: Session, dispute_id: int):
    return db.query(models.Dispute).filter(models.Dispute.id == dispute_id).first()

def create_dispute(db: Session, dispute: schemas.DisputeCreate):
    db_dispute = models.Dispute(**dispute.dict())
    db.add(db_dispute)
    db.commit()
    db.refresh(db_dispute)
    return db_dispute

def create_dispute_image(db: Session, image_data: dict):
    db_image = models.DisputeImage(**image_data)
    db.add(db_image)
    db.commit()
    db.refresh(db_image)
    return db_image

def get_disputes(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.Dispute).offset(skip).limit(limit).all()

def update_dispute_status(db: Session, dispute_id: int, status: models.DisputeStatus, resolved_by: int = None):
    dispute = db.query(models.Dispute).filter(models.Dispute.id == dispute_id).first()
    if dispute:
        dispute.status = status
        if resolved_by:
            dispute.resolved_by = resolved_by
        db.commit()
        db.refresh(dispute)
    return dispute

def complete_service(db: Session, service_id: int):
    service = db.query(models.Service).filter(models.Service.id == service_id).first()
    if service:
        service.status = "completed"
        db.commit()
        db.refresh(service)
    return service
```

```python
# app/main.py
from fastapi import FastAPI, Depends, UploadFile, File, Form, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from datetime import datetime
import os

from app.config import settings
from app.database import get_db, engine, Base
from app import models, schemas, crud, utils

# Criar tabelas
Base.metadata.create_all(bind=engine)
utils.ensure_upload_dir()

app = FastAPI(
    title="Visit - Sistema de Disputas",
    description="Sistema completo para gerenciamento de disputas entre clientes e prestadores",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir arquivos est√°ticos
app.mount("/uploads", StaticFiles(directory=settings.UPLOAD_DIR), name="uploads")

@app.post("/users/", response_model=schemas.UserResponse)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user(db, user.id) if hasattr(user, 'id') else None
    if db_user:
        raise HTTPException(status_code=400, detail="Usu√°rio j√° existe")
    
    # Em produ√ß√£o, aqui voc√™ hash a senha
    db_user = models.User(
        name=user.name,
        email=user.email,
        role=user.role
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

@app.post("/services/", response_model=schemas.ServiceResponse)
def create_service(service: schemas.ServiceCreate, db: Session = Depends(get_db)):
    # Verificar se cliente existe
    client = crud.get_user(db, service.client_id)
    if not client or client.role != models.UserRole.CLIENT:
        raise HTTPException(status_code=400, detail="Cliente inv√°lido")
    
    # Verificar se prestador existe
    provider = crud.get_user(db, service.provider_id)
    if not provider or provider.role != models.UserRole.PROVIDER:
        raise HTTPException(status_code=400, detail="Prestador inv√°lido")
    
    db_service = models.Service(**service.dict())
    db.add(db_service)
    db.commit()
    db.refresh(db_service)
    return db_service

@app.post("/disputes/", response_model=schemas.DisputeResponse)
def open_dispute(
    service_id: int = Form(...),
    opened_by: int = Form(...),
    description: str = Form(...),
    db: Session = Depends(get_db)
):
    # Verificar se servi√ßo existe
    service = crud.get_service(db, service_id)
    if not service:
        raise HTTPException(status_code=404, detail="Servi√ßo n√£o encontrado")
    
    # Verificar se usu√°rio existe e tem permiss√£o
    user = crud.get_user(db, opened_by)
    if not user or user.id not in [service.client_id, service.provider_id]:
        raise HTTPException(status_code=403, detail="Usu√°rio n√£o tem permiss√£o para abrir disputa neste servi√ßo")
    
    dispute_data = schemas.DisputeCreate(
        service_id=service_id,
        opened_by=opened_by,
        description=description
    )
    
    dispute = crud.create_dispute(db, dispute_data)
    return dispute

@app.post("/disputes/{dispute_id}/upload", response_model=schemas.DisputeImageResponse)
def upload_dispute_image(
    dispute_id: int,
    uploaded_by: int = Form(...),
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    # Verificar se disputa existe
    dispute = crud.get_dispute(db, dispute_id)
    if not dispute:
        raise HTTPException(status_code=404, detail="Disputa n√£o encontrada")
    
    # Verificar se usu√°rio tem permiss√£o
    user = crud.get_user(db, uploaded_by)
    if not user or user.id not in [dispute.service.client_id, dispute.service.provider_id, dispute.opened_by]:
        raise HTTPException(status_code=403, detail="Usu√°rio n√£o tem permiss√£o para enviar imagens")
    
    # Salvar arquivo
    filename, file_path, file_size = utils.save_upload_file(file, settings.UPLOAD_DIR)
    
    # Salvar no banco
    image_data = {
        "dispute_id": dispute_id,
        "uploaded_by": uploaded_by,
        "filename": filename,
        "file_path": file_path,
        "file_size": file_size
    }
    
    image = crud.create_dispute_image(db, image_data)
    return image

@app.get("/disputes/{dispute_id}", response_model=schemas.DisputeWithImagesResponse)
def get_dispute(dispute_id: int, db: Session = Depends(get_db)):
    dispute = crud.get_dispute(db, dispute_id)
    if not dispute:
        raise HTTPException(status_code=404, detail="Disputa n√£o encontrada")
    return dispute

@app.get("/disputes/", response_model=list[schemas.DisputeResponse])
def list_disputes(
    status: models.DisputeStatus = None,
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    disputes = crud.get_disputes(db, skip=skip, limit=limit)
    if status:
        disputes = [d for d in disputes if d.status == status]
    return disputes

@app.post("/disputes/{dispute_id}/resolve", response_model=schemas.DisputeResponse)
def resolve_dispute(
    dispute_id: int,
    resolution: schemas.DisputeResolution,
    db: Session = Depends(get_db)
):
    dispute = crud.get_dispute(db, dispute_id)
    if not dispute:
        raise HTTPException(status_code=404, detail="Disputa n√£o encontrada")
    
    # Verificar se resolved_by √© admin
    admin = crud.get_user(db, resolution.resolved_by)
    if not admin or admin.role != models.UserRole.ADMIN:
        raise HTTPException(status_code=403, detail="Apenas administradores podem resolver disputas")
    
    # Aplicar decis√£o
    if resolution.decision == "client":
        new_status = models.DisputeStatus.RESOLVED_CLIENT
    elif resolution.decision == "provider":
        new_status = models.DisputeStatus.RESOLVED_PROVIDER
    else:
        raise HTTPException(status_code=400, detail="Decis√£o inv√°lida. Use 'client' ou 'provider'")
    
    dispute = crud.update_dispute_status(db, dispute_id, new_status, resolution.resolved_by)
    dispute.resolved_at = datetime.utcnow()
    db.commit()
    
    return dispute

@app.post("/services/{service_id}/confirm", response_model=schemas.ServiceResponse)
def confirm_service(
    service_id: int,
    confirmed_by: int = Form(...),
    db: Session = Depends(get_db)
):
    service = crud.get_service(db, service_id)
    if not service:
        raise HTTPException(status_code=404, detail="Servi√ßo n√£o encontrado")
    
    # Verificar se √© o cliente do servi√ßo
    if service.client_id != confirmed_by:
        raise HTTPException(status_code=403, detail="Apenas o cliente pode confirmar o servi√ßo")
    
    service = crud.complete_service(db, service_id)
    service.completed_at = datetime.utcnow()
    db.commit()
    
    return service

@app.get("/")
def read_root():
    return {"message": "Visit API - Sistema de Disputas", "version": "1.0.0"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

üé® Frontend Final (React + Tailwind)

```jsx
// src/services/api.js
const API_BASE = "http://localhost:8000";

export class VisitAPI {
    static async createUser(userData) {
        const response = await fetch(`${API_BASE}/users/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        return this.handleResponse(response);
    }

    static async createService(serviceData) {
        const response = await fetch(`${API_BASE}/services/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(serviceData)
        });
        return this.handleResponse(response);
    }

    static async openDispute(serviceId, openedBy, description) {
        const formData = new FormData();
        formData.append('service_id', serviceId);
        formData.append('opened_by', openedBy);
        formData.append('description', description);

        const response = await fetch(`${API_BASE}/disputes/`, {
            method: 'POST',
            body: formData
        });
        return this.handleResponse(response);
    }

    static async uploadDisputeImage(disputeId, uploadedBy, file) {
        const formData = new FormData();
        formData.append('uploaded_by', uploadedBy);
        formData.append('file', file);

        const response = await fetch(`${API_BASE}/disputes/${disputeId}/upload`, {
            method: 'POST',
            body: formData
        });
        return this.handleResponse(response);
    }

    static async getDispute(disputeId) {
        const response = await fetch(`${API_BASE}/disputes/${disputeId}`);
        return this.handleResponse(response);
    }

    static async listDisputes(status = null) {
        const url = status ? `${API_BASE}/disputes/?status=${status}` : `${API_BASE}/disputes/`;
        const response = await fetch(url);
        return this.handleResponse(response);
    }

    static async resolveDispute(disputeId, resolvedBy, decision) {
        const response = await fetch(`${API_BASE}/disputes/${disputeId}/resolve`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ resolved_by: resolvedBy, decision })
        });
        return this.handleResponse(response);
    }

    static async confirmService(serviceId, confirmedBy) {
        const formData = new FormData();
        formData.append('confirmed_by', confirmedBy);

        const response = await fetch(`${API_BASE}/services/${serviceId}/confirm`, {
            method: 'POST',
            body: formData
        });
        return this.handleResponse(response);
    }

    static async handleResponse(response) {
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || 'Erro na requisi√ß√£o');
        }
        return response.json();
    }
}
```

```jsx
// src/components/UserRegistration.jsx
import { useState } from 'react';
import { VisitAPI } from '../services/api';

export default function UserRegistration({ onUserCreated }) {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        role: 'client',
        password: ''
    });
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        
        try {
            const user = await VisitAPI.createUser(formData);
            onUserCreated(user);
            setFormData({ name: '', email: '', role: 'client', password: '' });
        } catch (error) {
            alert(`Erro: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-2xl font-bold mb-4">Cadastro de Usu√°rio</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700">Nome</label>
                    <input
                        type="text"
                        required
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    />
                </div>
                
                <div>
                    <label className="block text-sm font-medium text-gray-700">Email</label>
                    <input
                        type="email"
                        required
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    />
                </div>
                
                <div>
                    <label className="block text-sm font-medium text-gray-700">Tipo</label>
                    <select
                        value={formData.role}
                        onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                        className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    >
                        <option value="client">Cliente</option>
                        <option value="provider">Prestador</option>
                        <option value="admin">Administrador</option>
                    </select>
                </div>
                
                <div>
                    <label className="block text-sm font-medium text-gray-700">Senha</label>
                    <input
                        type="password"
                        required
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    />
                </div>
                
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50"
                >
                    {loading ? 'Cadastrando...' : 'Cadastrar Usu√°rio'}
                </button>
            </form>
        </div>
    );
}
```

```jsx
// src/components/ServiceDispute.jsx
import { useState } from 'react';
import { VisitAPI } from '../services/api';

export default function ServiceDispute({ serviceId, userId, userRole, onUpdate }) {
    const [description, setDescription] = useState('');
    const [files, setFiles] = useState([]);
    const [disputeId, setDisputeId] = useState(null);
    const [loading, setLoading] = useState(false);
    const [activeTab, setActiveTab] = useState('confirm');

    const openDispute = async () => {
        if (!description.trim()) {
            alert('Por favor, descreva o problema');
            return;
        }

        setLoading(true);
        try {
            const result = await VisitAPI.openDispute(serviceId, userId, description);
            setDisputeId(result.id);
            alert('Disputa aberta com sucesso!');
            onUpdate?.();
        } catch (error) {
            alert(`Erro: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const uploadFiles = async () => {
        if (files.length === 0) {
            alert('Selecione pelo menos uma imagem');
            return;
        }

        setLoading(true);
        try {
            for (let file of files) {
                await VisitAPI.uploadDisputeImage(disputeId, userId, file);
            }
            alert('Imagens enviadas com sucesso!');
            setFiles([]);
            onUpdate?.();
        } catch (error) {
            alert(`Erro: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const confirmService = async () => {
        setLoading(true);
        try {
            await VisitAPI.confirmService(serviceId, userId);
            alert('Servi√ßo confirmado com sucesso!');
            onUpdate?.();
        } catch (error) {
            alert(`Erro: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="bg-white rounded-lg shadow-md p-6 max-w-2xl mx-auto">
            <h2 className="text-xl font-bold mb-4">Finaliza√ß√£o do Servi√ßo</h2>
            
            <div className="flex border-b mb-4">
                <button
                    className={`px-4 py-2 font-medium ${activeTab === 'confirm' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}
                    onClick={() => setActiveTab('confirm')}
                >
                    Confirmar Servi√ßo
                </button>
                <button
                    className={`px-4 py-2 font-medium ${activeTab === 'dispute' ? 'border-b-2 border-red-500 text-red-600' : 'text-gray-500'}`}
                    onClick={() => setActiveTab('dispute')}
                >
                    Abrir Disputa
                </button>
            </div>

            {activeTab === 'confirm' && (
                <div className="space-y-4">
                    <p className="text-gray-600">Confirme que o servi√ßo foi realizado conforme combinado.</p>
                    <button
                        onClick={confirmService}
                        disabled={loading}
                        className="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 font-medium"
                    >
                        {loading ? 'Confirmando...' : 'Confirmar Servi√ßo Conclu√≠do'}
                    </button>
                </div>
            )}

            {activeTab === 'dispute' && (
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Descri√ß√£o do Problema
                        </label>
                        <textarea
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            placeholder="Descreva detalhadamente o problema encontrado..."
                            className="w-full border border-gray-300 rounded-lg p-3 min-h-[100px]"
                            disabled={!!disputeId}
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            {disputeId ? 'Adicionar Mais Imagens' : 'Anexar Imens (Opcional)'}
                        </label>
                        <input
                            type="file"
                            multiple
                            accept="image/*"
                            onChange={(e) => setFiles(Array.from(e.target.files))}
                            className="w-full border border-gray-300 rounded-lg p-2"
                        />
                        {files.length > 0 && (
                            <div className="mt-2 text-sm text-gray-600">
                                {files.length} arquivo(s) selecionado(s)
                            </div>
                        )}
                    </div>

                    <div className="flex gap-3">
                        {!disputeId ? (
                            <button
                                onClick={openDispute}
                                disabled={loading || !description.trim()}
                                className="flex-1 bg-red-600 text-white py-3 px-4 rounded-lg hover:bg-red-700 disabled:opacity-50 font-medium"
                            >
                                {loading ? 'Abrindo...' : 'Abrir Disputa'}
                            </button>
                        ) : (
                            <button
                                onClick={uploadFiles}
                                disabled={loading || files.length === 0}
                                className="flex-1 bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 font-medium"
                            >
                                {loading ? 'Enviando...' : 'Enviar Imagens'}
                            </button>
                        )}
                    </div>

                    {disputeId && (
                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                            <p className="text-blue-800 font-medium">Disputa #{disputeId} aberta com sucesso!</p>
                            <p className="text-blue-600 text-sm">Agora voc√™ pode enviar imagens como evid√™ncia.</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
}
```

```jsx
// src/components/AdminPanel.jsx
import { useState, useEffect } from 'react';
import { VisitAPI } from '../services/api';

export default function AdminPanel({ adminId }) {
    const [disputes, setDisputes] = useState([]);
    const [selectedDispute, setSelectedDispute] = useState(null);
    const [loading, setLoading] = useState(false);

    const loadDisputes = async () => {
        setLoading(true);
        try {
            const data = await VisitAPI.listDisputes();
            setDisputes(Array.isArray(data) ? data : data.disputes || []);
        } catch (error) {
            alert(`Erro ao carregar disputas: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const loadDisputeDetails = async (disputeId) => {
        try {
            const dispute = await VisitAPI.getDispute(disputeId);
            setSelectedDispute(dispute);
        } catch (error) {
            alert(`Erro ao carregar detalhes: ${error.message}`);
        }
    };

    const resolveDispute = async (disputeId, decision) => {
        if (!confirm(`Tem certeza que deseja resolver esta disputa em favor do ${decision === 'client' ? 'cliente' : 'prestador'}?`)) {
            return;
        }

        try {
            await VisitAPI.resolveDispute(disputeId, adminId, decision);
            alert('Disputa resolvida com sucesso!');
            loadDisputes();
            setSelectedDispute(null);
        } catch (error) {
            alert(`Erro: ${error.message}`);
        }
    };

    useEffect(() => {
        loadDisputes();
    }, []);

    const getStatusColor = (status) => {
        const colors = {
            open: 'bg-yellow-100 text-yellow-800',
            under_review: 'bg-blue-100 text-blue-800',
            resolved_client: 'bg-green-100 text-green-800',
            resolved_provider: 'bg-green-100 text-green-800'
        };
        return colors[status] || 'bg-gray-100 text-gray-800';
    };

    return (
        <div className="max-w-6xl mx-auto bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6">Painel Administrativo - Disputas</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Lista de Disputas */}
                <div>
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Disputas Ativas</h3>
                        <button
                            onClick={loadDisputes}
                            className="bg-gray-100 px-3 py-1 rounded text-sm hover:bg-gray-200"
                        >
                            Atualizar
                        </button>
                    </div>
                    
                    {loading ? (
                        <div className="text-center py-4">Carregando...</div>
                    ) : disputes.length === 0 ? (
                        <div className="text-center py-4 text-gray-500">Nenhuma disputa encontrada</div>
                    ) : (
                        <div className="space-y-3 max-h-96 overflow-y-auto">
                            {disputes.map((dispute) => (
                                <div
                                    key={dispute.id}
                                    className={`border rounded-lg p-4 cursor-pointer hover:border-blue-300 ${
                                        selectedDispute?.id === dispute.id ? 'border-blue-500 bg-blue-50' : ''
                                    }`}
                                    onClick={() => loadDisputeDetails(dispute.id)}
                                >
                                    <div className="flex justify-between items-start">
                                        <div>
                                            <h4 className="font-medium">Disputa #{dispute.id}</h4>
                                            <p className="text-sm text-gray-600">Servi√ßo: {dispute.service_id}</p>
                                            <p className="text-sm text-gray-600 truncate">{dispute.description}</p>
                                        </div>
                                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(dispute.status)}`}>
                                            {dispute.status}
                                        </span>
                                    </div>
                                    <div className="text-xs text-gray-500 mt-2">
                                        Aberta em: {new Date(dispute.created_at).toLocaleDateString()}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Detalhes da Disputa Selecionada */}
                <div>
                    <h3 className="text-lg font-semibold mb-4">Detalhes da Disputa</h3>
                    
                    {!selectedDispute ? (
                        <div className="text-center py-8 text-gray-500">
                            Selecione uma disputa para ver os detalhes
                        </div>
                    ) : (
                        <div className="space-y-4">
                            <div className="border rounded-lg p-4">
                                <h4 className="font-bold mb-2">Informa√ß√µes da Disputa</h4>
                                <p><strong>ID:</strong> {selectedDispute.id}</p>
                                <p><strong>Servi√ßo:</strong> {selectedDispute.service_id}</p>
                                <p><strong>Aberta por:</strong> {selectedDispute.opened_by}</p>
                                <p><strong>Status:</strong> 
                                    <span className={`ml-2 px-2 py-1 rounded text-xs ${getStatusColor(selectedDispute.status)}`}>
                                        {selectedDispute.status}
                                    </span>
                                </p>
                                <p><strong>Descri√ß√£o:</strong> {selectedDispute.description}</p>
                            </div>

                            {selectedDispute.images && selectedDispute.images.length > 0 && (
                                <div className="border rounded-lg p-4">
                                    <h4 className="font-bold mb-2">Imagens Anexadas ({selectedDispute.images.length})</h4>
                                    <div className="grid grid-cols-2 gap-2">
                                        {selectedDispute.images.map((image) => (
                                            <div key={image.id} className="border rounded p-2">
                                                <img
                                                    src={`http://localhost:8000${image.file_path}`}
                                                    alt={`Evid√™ncia ${image.id}`}
                                                    className="w-full h-24 object-cover rounded"
                                                />
                                                <p className="text-xs text-gray-600 mt-1">
                                                    Enviado por: {image.uploaded_by}
                                                </p>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {selectedDispute.status === 'open' && (
                                <div className="border rounded-lg p-4 bg-yellow-50">
                                    <h4 className="font-bold mb-2">Resolu√ß√£o da Disputa</h4>
                                    <p className="text-sm text-yellow-700 mb-3">
                                        Analise as evid√™ncias e decida em favor de uma das partes:
                                    </p>
                                    <div className="flex gap-3">
                                        <button
                                            onClick={() => resolveDispute(selectedDispute.id, 'client')}
                                            className="flex-1 bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700"
                                        >
                                            Decidir para o Cliente
                                        </button>
                                        <button
                                            onClick={() => resolveDispute(selectedDispute.id, 'provider')}
                                            className="flex-1 bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
                                        >
                                            Decidir para o Prestador
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
```

```jsx
// src/App.jsx
import { useState } from 'react';
import UserRegistration from './components/UserRegistration';
import ServiceDispute from './components/ServiceDispute';
import AdminPanel from './components/AdminPanel';
import { VisitAPI } from './services/api';

function App() {
    const [currentUser, setCurrentUser] = useState(null);
    const [services, setServices] = useState([]);
    const [activeService, setActiveService] = useState(null);

    const handleUserCreated = (user) => {
        setCurrentUser(user);
        alert(`Usu√°rio ${user.name} criado com sucesso! ID: ${user.id}`);
    };

    const createSampleService = async () => {
        if (!currentUser) {
            alert('Crie um usu√°rio primeiro');
            return;
        }

        // Buscar usu√°rios para criar servi√ßo
        try {
            // Em produ√ß√£o, voc√™ teria uma lista real de usu√°rios
            const client = currentUser.role === 'client' ? currentUser : { id: 1 };
            const provider = currentUser.role === 'provider' ? currentUser : { id: 2 };
            
            const serviceData = {
                title: 'Servi√ßo de Exemplo',
                description: 'Descri√ß√£o do servi√ßo contratado',
                client_id: client.id,
                provider_id: provider.id
            };

            const service = await VisitAPI.createService(serviceData);
            setServices([...services, service]);
            setActiveService(service);
            alert(`Servi√ßo criado com sucesso! ID: ${service.id}`);
        } catch (error) {
            alert(`Erro ao criar servi√ßo: ${error.message}`);
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 py-8">
            <div className="container mx-auto px-4">
                <h1 className="text-3xl font-bold text-center mb-8">Visit - Sistema de Disputas</h1>
                
                {!currentUser ? (
                    <UserRegistration onUserCreated={handleUserCreated} />
                ) : (
                    <div className="space-y-8">
                        {/* Info do Usu√°rio */}
                        <div className="bg-white rounded-lg shadow-md p-6 max-w-md mx-auto">
                            <h2 className="text-xl font-bold mb-2">Usu√°rio Logado</h2>
                            <p><strong>Nome:</strong> {currentUser.name}</p>
                            <p><strong>Email:</strong> {currentUser.email}</p>
                            <p><strong>Tipo:</strong> {currentUser.role}</p>
                            <p><strong>ID:</strong> {currentUser.id}</p>
                        </div>

                        {/* Painel conforme o tipo de usu√°rio */}
                        {currentUser.role === 'admin' ? (
                            <AdminPanel adminId={currentUser.id} />
                        ) : (
                            <div className="space-y-6">
                                {/* Controle de Servi√ßos */}
                                <div className="bg-white rounded-lg shadow-md p-6 max-w-md mx-auto">
                                    <h2 className="text-xl font-bold mb-4">Gerenciar Servi√ßos</h2>
                                    <button
                                        onClick={createSampleService}
                                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
                                    >
                                        Criar Servi√ßo de Exemplo
                                    </button>
                                    
                                    {services.length > 0 && (
                                        <div className="mt-4">
                                            <h3 className="font-semibold mb-2">Servi√ßos Criados:</h3>
                                            {services.map(service => (
                                                <div key={service.id} className="border rounded p-3 mb-2">
                                                    <p><strong>Servi√ßo #{service.id}:</strong> {service.title}</p>
                                                    <button
                                                        onClick={() => setActiveService(service)}
                                                        className="mt-2 bg-green-600 text-white px-3 py-1 rounded text-sm"
                                                    >
                                                        Gerenciar
                                                    </button>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>

                                {/* Painel do Servi√ßo */}
                                {activeService && (
                                    <ServiceDispute
                                        serviceId={activeService.id}
                                        userId={currentUser.id}
                                        userRole={currentUser.role}
                                        onUpdate={() => alert('Sistema atualizado!')}
                                    />
                                )}
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
}

export default App;
```

üì¶ Estrutura Final do Projeto

```
visit-project/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py
‚îÇ   ‚îú‚îÄ‚îÄ database.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ schemas.py
‚îÇ   ‚îú‚îÄ‚îÄ crud.py
‚îÇ   ‚îî‚îÄ‚îÄ utils.py
‚îú‚îÄ‚îÄ uploads/
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserRegistration.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ServiceDispute.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AdminPanel.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.jsx
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

üöÄ Como Executar

Backend:

```bash
cd visit-project
pip install -r requirements.txt
uvicorn app.main:app --reload --port 8000
```

Frontend:

```bash
cd frontend
npm install
npm run dev
```

